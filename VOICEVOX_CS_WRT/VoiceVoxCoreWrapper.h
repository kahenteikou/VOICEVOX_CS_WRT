#pragma once
#include "VoiceVoxCoreWrapper.g.h"

// WARNING: This file is automatically generated by a tool. Do not directly
// add this file to your project, as any changes you make will be lost.
// This file is a stub you can use as a starting point for your implementation.
//
// To add a copy of this file to your project:
//   1. Copy this file from its original location to the location where you store 
//      your other source files (e.g. the project root). 
//   2. Add the copied file to your project. In Visual Studio, you can use 
//      Project -> Add Existing Item.
//   3. Delete this comment and the 'static_assert' (below) from the copied file.
//      Do not modify the original file.
//
// To update an existing file in your project:
//   1. Copy the relevant changes from this file and merge them into the copy 
//      you made previously.
//    
// This assertion helps prevent accidental modification of generated files.
//static_assert(false, "This file is generated by a tool and will be overwritten. Open this error and view the comment for assistance.");

namespace winrt::VOICEVOX_CS_WRT::implementation
{
    struct VoiceVoxCoreWrapper : VoiceVoxCoreWrapperT<VoiceVoxCoreWrapper>
    {
        VoiceVoxCoreWrapper() = default;

        VoiceVoxCoreWrapper(hstring const& coredll_path);
        bool InitializeCore(bool use_cpu, int32_t cpu_numthreads, bool load_allmodels);
        winrt::VOICEVOX_CS_WRT::VoiceVoxResult_ENUM voicevox_load_openjtalk_dict(hstring const& dpath);
        hstring voicevox_error_result_to_message(winrt::VOICEVOX_CS_WRT::VoiceVoxResult_ENUM const& result_code);
        winrt::VOICEVOX_CS_WRT::VoiceVoxResult_ENUM voicevox_tts(hstring const& text, int64_t speaker_id, int64_t output_binary_size, int64_t output_wav);
        winrt::VOICEVOX_CS_WRT::VoiceVoxResult_ENUM voicevox_tts_from_kana(hstring const& text, int64_t speaker_id, int64_t output_binary_size, int64_t output_wav);
        void voicevox_free_wav(int64_t wav);
        bool load_model(int64_t speaker_id);
        bool is_model_loaded(int64_t speaker_id);
        void Close();
    private:
        HMODULE _hmod = nullptr;
        VOICEVOX_LOAD_Ojtalk_dict __voicevox_load_openjtalk_dict = nullptr;
        VOICEVOX_error_result_to_message __voicevox_error_result_to_message = nullptr;
        VOICEVOX_VOICEVOXTTS __voicevox_tts = nullptr;
        VOICEVOX_VOICEVOXTTSFREE __voicevox_wav_free = nullptr;
        VOICEVOX_INITIALIZE __voicevox_initialize = nullptr;
        VOICEVOX_LOADMODEL __voicevox_loadmodel = nullptr;
        VOICEVOX_VOICEVOXTTSKANA __voicevox_tts_kana = nullptr;
        VOICEVOX_ISMODELLOADED __voicevox_is_model_loaded=nullptr;
    };
}
namespace winrt::VOICEVOX_CS_WRT::factory_implementation
{
    struct VoiceVoxCoreWrapper : VoiceVoxCoreWrapperT<VoiceVoxCoreWrapper, implementation::VoiceVoxCoreWrapper>
    {
    };
}
