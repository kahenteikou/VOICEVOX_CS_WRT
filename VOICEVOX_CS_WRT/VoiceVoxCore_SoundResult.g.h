// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220531.1

#pragma once
#include "winrt/VOICEVOX_CS_WRT.h"
namespace winrt::VOICEVOX_CS_WRT::implementation
{
    template <typename D, typename... I>
    struct __declspec(empty_bases) VoiceVoxCore_SoundResult_base : implements<D, VOICEVOX_CS_WRT::VoiceVoxCore_SoundResult, I...>
    {
        using base_type = VoiceVoxCore_SoundResult_base;
        using class_type = VOICEVOX_CS_WRT::VoiceVoxCore_SoundResult;
        using implements_type = typename VoiceVoxCore_SoundResult_base::implements_type;
        using implements_type::implements_type;
        
        hstring GetRuntimeClassName() const
        {
            return L"VOICEVOX_CS_WRT.VoiceVoxCore_SoundResult";
        }
    };
}
namespace winrt::VOICEVOX_CS_WRT::factory_implementation
{
    template <typename D, typename T, typename... I>
    struct __declspec(empty_bases) VoiceVoxCore_SoundResultT : implements<D, winrt::Windows::Foundation::IActivationFactory, winrt::VOICEVOX_CS_WRT::IVoiceVoxCore_SoundResultFactory, I...>
    {
        using instance_type = VOICEVOX_CS_WRT::VoiceVoxCore_SoundResult;

        hstring GetRuntimeClassName() const
        {
            return L"VOICEVOX_CS_WRT.VoiceVoxCore_SoundResult";
        }
        auto CreateInstance(winrt::VOICEVOX_CS_WRT::VoiceVoxResult_ENUM const& result_v, int64_t out_size, int64_t out_wav_ptr)
        {
            return make<T>(result_v, out_size, out_wav_ptr);
        }
        [[noreturn]] winrt::Windows::Foundation::IInspectable ActivateInstance() const
        {
            throw hresult_not_implemented();
        }
    };
}

#if defined(WINRT_FORCE_INCLUDE_VOICEVOXCORE_SOUNDRESULT_XAML_G_H) || __has_include("VoiceVoxCore_SoundResult.xaml.g.h")

#include "VoiceVoxCore_SoundResult.xaml.g.h"

#else

namespace winrt::VOICEVOX_CS_WRT::implementation
{
    template <typename D, typename... I>
    using VoiceVoxCore_SoundResultT = VoiceVoxCore_SoundResult_base<D, I...>;
}

#endif
